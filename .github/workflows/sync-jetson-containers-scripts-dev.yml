# .github/workflows/sync-jetson-containers-scripts-dev.yml
# IMPORTANT: Keep this file ONLY on the 'dev' branch during testing.
#            Do NOT merge this version to 'main'.

name: Sync jetson-containers scripts (DEV TEST) # Updated name

on:
  # Trigger workflow on pushes specifically to the dev branch
  push:
    branches:
      - dev

  # Allow manual triggering (remember to select 'dev' branch in the Actions UI)
  workflow_dispatch:

# Environment variables updated with your specific paths
env:
  SOURCE_REPO_URL: 'https://github.com/dusty-nv/jetson-containers.git' # Your Source Repo
  SOURCE_BRANCH: 'master'                                            # Default branch of source repo
  SOURCE_DIR_PATH: 'scripts'                                         # Source directory name
  DEST_DIR_PATH: 'scripts/jetson-containers-scripts'                 # Destination directory name in your repo
  GIT_USER_NAME: 'github-actions[bot]'
  GIT_USER_EMAIL: 'github-actions[bot]@users.noreply.github.com'

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout your repository (the destination - will checkout the 'dev' branch)
      - name: Checkout Destination Repo (dev branch)
        uses: actions/checkout@v4

      # 2. Set up a temporary directory for the source repo clone
      - name: Set up temporary directory
        run: mkdir ../source_repo_temp

      # 3. Clone the source repository using sparse checkout
      - name: Clone Source Repo (Sparse Checkout)
        run: |
          # Source repo is public, ACCESS_TOKEN logic below is harmless if secret is not set.
          SOURCE_URL=${{ env.SOURCE_REPO_URL }}
          ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }} # This secret is NOT needed for this public repo
          if [[ -n "$ACCESS_TOKEN" && "$SOURCE_URL" == https://* ]]; then
            SOURCE_URL="https://${ACCESS_TOKEN}@${SOURCE_URL#https://}"
          fi

          echo "Cloning from $SOURCE_URL branch ${{ env.SOURCE_BRANCH }}"
          git clone --no-checkout --depth 1 --filter=blob:none "$SOURCE_URL" ../source_repo_temp
          cd ../source_repo_temp
          git sparse-checkout init --cone
          # Ensure the path provided doesn't have leading/trailing slashes for set command
          CLEANED_SOURCE_PATH=$(echo "${{ env.SOURCE_DIR_PATH }}" | sed 's:^/*::;s:/*$::')
          git sparse-checkout set "$CLEANED_SOURCE_PATH"
          echo "Checking out source branch: ${{ env.SOURCE_BRANCH }}"
          git checkout ${{ env.SOURCE_BRANCH }}
        # No ACCESS_TOKEN needed in env here as repo is public
        # env:
        #   ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # 4. Remove the old destination directory and copy the new one
      - name: Update directory in destination repo
        run: |
          echo "Removing old content at ${{ env.DEST_DIR_PATH }}"
          rm -rf "${{ env.DEST_DIR_PATH }}"
          echo "Copying new content from ../source_repo_temp/${{ env.SOURCE_DIR_PATH }} to ${{ env.DEST_DIR_PATH }}"
          # Ensure destination parent directory exists (scripts is top-level, so likely not needed, but safe)
          mkdir -p "$(dirname "${{ env.DEST_DIR_PATH }}")"
          # Copy content
          cp -r ../source_repo_temp/"${{ env.SOURCE_DIR_PATH }}" "${{ env.DEST_DIR_PATH }}"
          echo "Cleaning up temporary clone"
          rm -rf ../source_repo_temp

      # 5. Check if there are changes
      - name: Check for changes
        id: check_changes
        run: |
          if ! git diff --quiet HEAD -- "${{ env.DEST_DIR_PATH }}"; then
            echo "Changes detected in ${{ env.DEST_DIR_PATH }}."
            # Also check for untracked files from the copy
            if [ -n "$(git status --porcelain -- "${{ env.DEST_DIR_PATH }}")" ]; then
               echo "changed=true" >> $GITHUB_OUTPUT
            else
               echo "No effective changes detected after add." # Should be caught by diff ideally
               echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No changes detected in ${{ env.DEST_DIR_PATH }}."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # 6. Commit and push changes if any were detected (will push to dev branch)
      - name: Commit and Push changes to dev branch
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --global user.name "${{ env.GIT_USER_NAME }}"
          git config --global user.email "${{ env.GIT_USER_EMAIL }}"
          git add "${{ env.DEST_DIR_PATH }}"
          COMMIT_MSG="[DEV TEST] Sync ${{ env.DEST_DIR_PATH }}/ from dust-nv/jetson-containers" # Updated commit message
          git commit -m "$COMMIT_MSG"
          # This push will go to the 'dev' branch because that's the branch checkout out by default
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
